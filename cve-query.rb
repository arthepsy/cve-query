#!/usr/bin/env ruby
require 'optparse'
require 'ostruct'

class DBConf
	attr_accessor :path, :host, :port, :name, :prop, :user, :pass
	
	def initialize()
		@path = nil
		@host = 'localhost'
		@port = 9092
		@name = "dc"
		@prop = ';MV_STORE=FALSE'
		@user = "dcuser"
		@pass = "DC-Pass1337!"
	end
end

def parse_opt(args)
	options = OpenStruct.new
	options.db_conf = DBConf.new()
	options.command = ""
	
	show_help = args.length == 0
	parser = OptionParser.new do |opts|
		opts.banner = "Usage: " << opts.program_name() << " [options] <command>"
		opts.separator ""
		opts.separator "Options:"
		opts.on("-d", "--data <dir>", String, "database directory path") do |v|
			options.db_conf.path = v
		end
		opts.on("-h", "--host <host>", 'database host (default: "%s")' % options.db_conf.host) do |v|
			options.db_conf.host = v
		end
		opts.on("-p", "--port <port>", 'database port (default: %d)' % options.db_conf.port) do |v|
			options.db_conf.port = v
		end
		opts.on("-n", "--name <name>", 'database name (default: "%s")' % options.db_conf.name) do |v|
			options.db_conf.name = v
		end
		opts.on("--properties <name>", 'database properties (default: "%s")' % options.db_conf.prop) do |v|
			options.db_conf.prop = v
		end
		opts.on("--username <username>", 'username (default: "%s")' % options.db_conf.user) do |v|
			options.db_conf.user = v
		end
		opts.on("--password <password>", 'password (default: "%s")' % options.db_conf.pass) do |v|
			options.db_conf.pass = v
		end
		opts.separator ""
		opts.on("--help", "show help") do |v|
			show_help = v
		end
		opts.separator "\nCommands:"
		opts.separator "    query <cpe>   \t\t\tquery for cpe (example: \"activemq:5.8\")"
		opts.separator "    server-cmd    \t\t\tshow database server start command\n\n"
	end
	parser.parse!(args)
	if not show_help 
		if args.length == 0
			show_help = true
		elsif args[0].length > 0 and not ['query', 'server-cmd'].include? args[0]
			show_help = true
			puts 'err: unknown command "%s"' % args[0]
			puts "\n"
		end
	end
	if show_help == true
		puts parser
		exit
	end
	options.command = args[0]
	options.args = args.slice(1, args.length)
	options
end

def get_server_cmd(db_conf)
	"java -Dh2.bindAddress=%s -cp h2-*.jar org.h2.tools.Server -tcp -tcpPort %d -baseDir %s" % [db_conf.host, db_conf.port, db_conf.path]
end

def get_conn_str(db_conf)
	if db_conf.path
		return "jdbc:h2:%s%s%s" % [db_conf.path, db_conf.name, db_conf.prop]
	else
		return "jdbc:h2:tcp://%s:%d/%s%s" % [db_conf.host, db_conf.port, db_conf.name, db_conf.prop]
	end
end

def get_conn(db_conf)
	require 'jdbc/h2'
	Jdbc::H2.load_driver
	java.sql.DriverManager.get_connection(get_conn_str(db_conf), db_conf.user, db_conf.pass)
end

options = parse_opt(ARGV)

if options.command == "server-cmd"
	if not options.db_conf.path
		puts "err: database directory not specified."
		exit 1
	end
	print get_server_cmd(options.db_conf) << "\n"
	exit
elsif options.command == "query"
	if options.args.length < 1
		puts "err: <cpe> not specified."
		exit 1
	end
	cpe = options.args[0]
	if cpe.length < 2
		puts "err: <cpe> too vague."
		exit 1
	end
	last_chr = cpe[-1,1]
	if last_chr == '.' or last_chr =~ /[[:digit:]]/
		cpe += '%'
	else
		if last_chr != '%'
			cpe += ':%'
		end
	end
	cpe_query = 'cpe:/%' + cpe
	
	conn = get_conn(options.db_conf)
	stmt = conn.prepare_statement("SELECT ID, CPE FROM CPEENTRY WHERE CPE LIKE ?")
	stmt.set_string(1, cpe_query)
	rs = stmt.execute_query()
	while (rs.next) do
		cpe_id = rs.getObject("id").to_i
		cpe_name = rs.getObject("cpe").to_s
		print "### %s\n" % [cpe_name]
		
		stmt_vuln = conn.create_statement
		q_vuln = 'SELECT CVE, DESCRIPTION FROM SOFTWARE LEFT OUTER JOIN VULNERABILITY ON (SOFTWARE.CVEID = VULNERABILITY.ID) WHERE SOFTWARE.CPEENTRYID=%d' % cpe_id
		rs_vuln = stmt_vuln.execute_query(q_vuln)
		while (rs_vuln.next) do
			cve_nr = rs_vuln.getObject("cve").to_s
			cve_descr = rs_vuln.getObject("description").to_s
			print "%s %s\n" % [cve_nr, cve_descr]
		end
		stmt_vuln.close
	end
	stmt.close

end
